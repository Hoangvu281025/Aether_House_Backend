const UserModel = require('../Models/userModel');
const RoleModel = require('../Models/roleModel');
const AddressModel = require('../Models/addressModel');
const cloudinary = require('../config/cloudinary');
const bcrypt = require('bcryptjs');
const sendMail = require("../utils/sendMail");



const userController = {
    getallUser: async (req, res) => {
        try {
            // l·∫•y page & limit t·ª´ query (m·∫∑c ƒë·ªãnh page = 1, limit = 10)
            const page = parseInt(req.query.page) || 1; 
            const limit = parseInt(req.query.limit) || 8;
            const skip = (page - 1) * limit;
            const adminRole = await RoleModel.find({ name: { $in: ["admin", "superadmin"] } }).select("_id");
            const excludeRoleIds = adminRole.map(r => r._id);
            const users = await UserModel.find({role_id: { $nin: excludeRoleIds } })
                .select("-password")
                .populate({
                    path: "role_id",
                    select: "name"
                })
                .skip(skip)   // b·ªè qua bao nhi√™u record
                .limit(limit) // l·∫•y bao nhi√™u record
                .lean();
                
            // ƒë·∫øm t·ªïng s·ªë user (ƒë·ªÉ frontend bi·∫øt c√≥ bao nhi√™u page)
            const total = await UserModel.countDocuments({ role_id: { $nin: excludeRoleIds } });
            res.status(200).json({
                total,         // t·ªïng s·ªë user
                page,          // trang hi·ªán t·∫°i
                limit,         // s·ªë user m·ªói trang
                totalPages: Math.ceil(total / limit),
                users   // danh s√°ch user
            });

        } catch (error) {
            console.log(error);
            return res.status(500).json({ error: "Internal server error" });
        }
    },
    
    getallAdmin: async (req, res) => {
        try {
            // l·∫•y page & limit t·ª´ query (m·∫∑c ƒë·ªãnh page = 1, limit = 10)
            const page = parseInt(req.query.page) || 1;
            const limit = parseInt(req.query.limit) || 8;
            const skip = (page - 1) * limit;
            const adminRole = await RoleModel.findOne({ name: "user" }).select("_id");
            // query user
            const users = await UserModel.find({role_id: { $ne: adminRole._id } })
                .select("-password")
                .populate({
                    path: "role_id",
                    select: "name"
                })
                .skip(skip)   // b·ªè qua bao nhi√™u record
                .limit(limit) // l·∫•y bao nhi√™u record
                .lean();
                
            // ƒë·∫øm t·ªïng s·ªë user (ƒë·ªÉ frontend bi·∫øt c√≥ bao nhi√™u page)
            const total = await UserModel.countDocuments({ role_id: { $ne: adminRole._id } });
            res.status(200).json({
                total,         // t·ªïng s·ªë user
                page,          // trang hi·ªán t·∫°i
                limit,         // s·ªë user m·ªói trang
                totalPages: Math.ceil(total / limit),
                users   // danh s√°ch user
            });

        } catch (error) {
            console.log(error);
            return res.status(500).json({ error: "Internal server error" });
        }
    },

    getbyID: async (req, res) => {
        try {
            const id = req.params.id; // l·∫•y id t·ª´ query
            if (!id) {
                return res.status(400).json({ error: "ID is required" });
            }

            const user = await UserModel.findById(id).populate("role_id",""); 
            const addresses = await AddressModel.find({ user_id: id });
            if (!user) {
                return res.status(404).json({ error: "User not found" });
            }

            res.status(200).json({
                user,
                addresses
            });

        } catch (error) {
            console.log(error);
            return res.status(500).json({ error: "Internal server error" });
        }
    },





    

    updateApprovalStatusUser: async (req, res) => {
        try {
            const user = await UserModel.findById(req.params.id);
            if (!user) return res.status(404).json({ error: "User not found" });

            // Toggle tr·∫°ng th√°i
            const was = user.approvalStatus; // 'pending' | 'approved'
            user.approvalStatus = was === "pending" ? "approved" : "pending";
            await user.save();

            // Chu·∫©n b·ªã email theo tr·∫°ng th√°i m·ªõi
            const isApproved = user.approvalStatus === "approved";
            const subject = isApproved
            ? "üéâ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát"
            : "‚ö†Ô∏è T√†i kho·∫£n c·ªßa b·∫°n t·∫°m th·ªùi b·ªã kh√≥a ch·ªù duy·ªát l·∫°i";

            const html = isApproved
            ? `
                <div style="font-family:system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif">
                <h2>Ch√∫c m·ª´ng ${user.name || ""}!</h2>
                <p>T√†i kho·∫£n c·ªßa b·∫°n tr√™n <b>AetherHouse</b> ƒë√£ ƒë∆∞·ª£c <b>duy·ªát</b>.</p>
                <p>B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√† s·ª≠ d·ª•ng h·ªá th·ªëng.</p>
                <p style="margin-top:16px">üëâ <a href="http://localhost:5173/" target="_blank">ƒêƒÉng nh·∫≠p ngay</a></p>
                <hr style="margin:20px 0;border:none;border-top:1px solid #eee"/>
                <p style="color:#666;font-size:13px">N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, vui l√≤ng li√™n h·ªá h·ªó tr·ª£.</p>
                </div>
            `
            : `
                <div style="font-family:system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif">
                <h2>Xin ch√†o ${user.name || ""},</h2>
                <p>T√†i kho·∫£n c·ªßa b·∫°n hi·ªán ƒëang ·ªü tr·∫°ng th√°i <b>ch·ªù duy·ªát</b>.</p>
                <p>Vui l√≤ng ch·ªù qu·∫£n tr·ªã vi√™n xem x√©t. Ch√∫ng t√¥i s·∫Ω th√¥ng b√°o ngay khi c√≥ c·∫≠p nh·∫≠t.</p>
                <hr style="margin:20px 0;border:none;border-top:1px solid #eee"/>
                <p style="color:#666;font-size:13px">N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng ph·∫£n h·ªìi email n√†y.</p>
                </div>
            `;

            // G·ª≠i mail (kh√¥ng ƒë·ªÉ l·ªói mail l√†m h·ªèng response)
            try {
            await sendMail({
                to: user.email,
                subject,
                html,
            });
            } catch (mailErr) {
            console.error("Send approval mail failed:", mailErr?.message || mailErr);
            // kh√¥ng throw ƒë·ªÉ API v·∫´n tr·∫£ 200
            }

            return res.status(200).json({
            message: isApproved ? "User approved successfully" : "User set to pending",
            user,
            });
        } catch (error) {
            console.error(error);
            return res.status(500).json({ error: "Internal server error" });
        }
    },



    updateImageAdmin: async (req , res) =>{
        try {
            const ID = req.params.id
            const user = await UserModel.findById(ID);

            if (!user) {
                return res.status(404).json({ error: "User not found" });
            }

            const file = req.file;
            if (!file) {
                return res.status(400).json({ error: 'Image file is required' });
            }
            const localPath = file.path;

            const Uploadresults = await cloudinary.uploader.upload(localPath, { folder: 'AetherHouse/users/admin' });
            const updatedUser = await UserModel.findByIdAndUpdate(
                ID,
                {
                    avatar: {
                        url: Uploadresults.secure_url,
                        public_id: Uploadresults.public_id,
                        localPath: localPath
                    },
                },
                { new: true } // ƒë·ªÉ tr·∫£ v·ªÅ user m·ªõi ƒë√£ update
                ).select("-password");

             return res.status(200).json({
                success: true,
                message: "Avatar updated successfully",
                user: updatedUser,
            });
        } catch (error) {
            console.log(error);
            return res.status(500).json({ error: 'Internal server error' });
        }
    },

    updateImageUser: async (req , res) =>{
        try {
            const ID = req.params.id
            const user = await UserModel.findById(ID);

            if (!user) {
                return res.status(404).json({ error: "User not found" });
            }

            const file = req.file;
            if (!file) {
                return res.status(400).json({ error: 'Image file is required' });
            }
            const localPath = file.path;

            const Uploadresults = await cloudinary.uploader.upload(localPath, { folder: 'AetherHouse/users/client' });
            const updatedUser = await UserModel.findByIdAndUpdate(
                ID,
                {
                    avatar: {
                        url: Uploadresults.secure_url,
                        public_id: Uploadresults.public_id,
                        localPath: localPath
                    },
                },
                { new: true } // ƒë·ªÉ tr·∫£ v·ªÅ user m·ªõi ƒë√£ update
                ).select("-password");

             return res.status(200).json({
                success: true,
                message: "Avatar updated successfully",
                user: updatedUser,
            });
        } catch (error) {
            console.log(error);
            return res.status(500).json({ error: 'Internal server error' });
        }
    },



    updateName: async (req,res) => {
        try {
            const{name} = req.body;
            if(!name || !name.trim()) {
                return res.status(404).json({error: "Name is b·∫Øt bu·ªôc "});
            }
            const updated = await UserModel.findByIdAndUpdate(
                req.params.id,
                {name: name.trim()},
                {name: true, runValidators: true}
            )
            .select("-password")
            .populate("role_id","name");

            if(!updated) return res.status(404).json({ error: "User not th·∫•y"});

            return res.status(202).json({
                message: "Name updated successfully",
                user: updated,
            });
        }catch (err) {
            console.log(err);
            return res.status(500).json({ error: "Internal server error" });
        }
    },



    updateinfor: async (req,res) => {
        try {
            const{ name , email } = req.body;
            if(!name || !email ) {
                return res.status(404).json({message: "Name and email is b·∫Øt bu·ªôc "});
            }
            const updated = await UserModel.findByIdAndUpdate(
                req.params.id,
                {name,
                email,},
                {new: true, runValidators: true}
            );

            if(!updated) return res.status(404).json({ message: "User not th·∫•y"});

            return res.status(202).json({
                message: "Name updated successfully",
                user: updated,
            });
        }catch (err) {
            console.log(err);
            return res.status(500).json({ error: "Internal server error" });
        }
    },







    updatePassword: async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body;

    if (!newPassword || newPassword.length < 6) {
      return res.status(400).json({ error: "New password must be √≠t nh·∫•t 6 characters" });
    }

    const actor = req.user;               
    const targetId = req.params.id;       

    const target = await UserModel.findById(targetId); // c√≥ password s·∫µn trong schema
    if (!target) return res.status(404).json({ error: "User not found" });

    const isSelf  = actor && String(actor.id) === String(targetId); 
    const isAdmin = ["admin", "superadmin"].includes(actor?.role_name); 

    if (!isSelf && !isAdmin) {
      return res.status(403).json({ error: "Forbidden" });
    }

    // User t·ª± ƒë·ªïi th√¨ ph·∫£i cung c·∫•p & x√°c th·ª±c currentPassword
    if (isSelf) {
      if (!currentPassword) {
        return res.status(400).json({ error: "Current password is required" });
      }
      const ok = await bcrypt.compare(currentPassword, target.password);
      if (!ok) {
        return res.status(400).json({ error: "Current password is incorrect" });
      }
    }

    const hash = await bcrypt.hash(newPassword, 10);
    target.password = hash;
    await target.save();

    return res.status(200).json({ message: "Password updated th√†nh c√¥ng r√≤i qu√≠ d·ªã" });
  } catch (err) {
    return res.status(500).json({ message: "Internal sever l·ªói" });
  }
},
    









    deleteUser: async (req, res) => {
        try {
            const user = await UserModel.findById(req.params.id);
            res.status(200).json("delete successfully")
            
        } catch (error) {
            console.log(error);
            return res.status(500).json({ error: 'Internal server error' });
        }
    },
}




module.exports = {userController}
